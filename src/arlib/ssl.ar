/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
*/

import runtime
from _ssl import *

pub let DEFAULT_CONTEXT = SSLContext::new(PROTO_TLS)

struct X509v3Purpose {
    # Extended Key Usage objects
    let SERVER_AUTH = "1.3.6.1.5.5.7.3.1"
    let CLIENT_AUTH = "1.3.6.1.5.5.7.3.2"
}

if runtime::os == "windows" {
    let _WINDOWS_CERT_STORES = ["CA", "ROOT"]

    () => {
        var certs = bytes::new()
        var cert, encoding, trust
        var store

        for store in _WINDOWS_CERT_STORES {
            for cert, encoding, trust in enumcerts_windows(store) {
                if encoding == "x509_asn" && trust || trust.contains(X509v3Purpose::SERVER_AUTH) {
                    certs += cert
                }
            }
        }

        certs ? DEFAULT_CONTEXT.load_cadata(certs, FILETYPE_ASN1)
    }()
}

DEFAULT_CONTEXT.load_paths_default()

pub func connect(address) {
    import socket
    var sock
    var err

    sock, err = socket::dial("tcp", address)
    if err != nil {
        return nil, err
    }

    sock = DEFAULT_CONTEXT.wrap(sock, false, nil)

    return sock, nil
}