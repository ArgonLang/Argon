/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
 *
 * Provides a set of algorithms to work with enumerables.
*/

from random import choice, randint

pub func all(enum) {
    var cur

    for cur in enum {
        if !cur {
            return false
        }
    }

    return true
}

pub func all_by(enum, fn) {
    var cur

    for cur in enum {
        if !fn(cur) {
            return false
        }
    }

    return true
}

pub func any(enum) {
    var cur

    for cur in enum {
        if cur {
            return true
        }
    }

    return false
}

pub func any_by(enum, fn) {
    var cur

    for cur in enum {
        if fn(cur) {
            return true
        }
    }

    return false
}

pub func at(enum, index, _default) {
    switch type(enum) {
        case list; tuple; string:
            if index >= len(enum) {
                return _default
            }

            return enum[index]
    }

    var cur
    var idx = 0

    for cur in enum {
        if idx == index {
            return cur
        }

        idx += 1
    }

    return _default
}

pub func chunk_by(enum, fn) {
    var ret = []
    var tmp = []
    var chg = false
    var cur

    for cur in enum {
        if fn(cur) {
            if !chg {
                ret.append(tmp)
                tmp = []
                chg = true
            }

            tmp.append(cur)
            continue
        }

        if chg {
            ret.append(tmp)
            tmp = []
            chg = false
        }

        tmp.append(cur)
    }

    if tmp {
        ret.append(tmp)
    }

    return ret
}

pub func count(enum, fn) {
    var length = 0
    var cur

    for cur in enum {
        if fn(cur) {
            length += 1
        }
    }

    return length
}

pub func dedup(enum) {
    var ret = []
    var cur
    var last
    var ins = false

    for cur in enum {
        if last !== cur && ins {
            ret.append(last)
        }

        last = cur
        ins = true
    }

    ret.append(last)

    return ret
}

pub func drop(enum, num) {
    var ret = enum

    if type(enum) != list {
        ret = list::new(enum)
    }

    return num >= 0 ? ret[num:] : ret[:num]
}

pub func seqgen(base) {
    loop {
        yield base++
    }
}

pub var seq = seqgen(0)

pub func each(enum, fn) {
    var cur

    for cur in enum {
        fn(cur)
    }

    return true
}

pub func fibgen(n1, n2) {
    var nth

    loop {
        yield n1
        nth = n1 + n2
        n1 = n2
        n2 = nth
    }
}

pub var fib = fibgen(0, 1)

pub func filter(enum, fn) {
    var ret = []
    var cur

    for cur in enum {
        if fn(cur) {
            ret.append(cur)
        }
    }

    return ret
}

pub func flat(enum) {
    var ret = []
    var cur

    for cur in enum {
        if isiterable(cur) {
            var icur
            for icur in cur {
                ret.append(icur)
            }
            continue
        }

        ret.append(cur)
    }

    return ret
}

pub func flat_all(enum) {
    var ret = []
    var cur

    for cur in enum {
        if isiterable(cur) {
            ret += flat_all(cur)
            continue
        }

        ret.append(cur)
    }

    return ret
}

pub func frequencies(enum) {
    var ret = {}
    var cur

    for cur in enum {
        ret[cur] = ret.get(cur).get_or(0) + 1
    }

    return ret
}

pub func frequencies_by(enum, fn) {
    var ret = {}
    var tmp
    var cur

    for cur in enum {
        tmp = fn(cur)
        ret[tmp] = ret.get(tmp).get_or(0) + 1
    }

    return ret
}

pub func group_by(enum, fn) {
    var ret = {}
    var tmp
    var cur

    for cur in enum {
        tmp = fn(cur)
        ret[tmp] = ret.get(tmp).get_or([]).append(cur)
    }

    return ret
}

pub func map(enum, fn) {
    var cur
    var ret

    if type(enum) == list || type(enum) == tuple {
        ret = [nil] * len(enum)

        var idx = 0
        for cur in enum {
            ret[idx] = fn(cur)
            idx += 1
        }

        return ret
    }

    ret = []

    for cur in enum {
        ret.append(fn(cur))
    }

    return ret
}

pub func random(enum) {
    switch type(enum) {
        case list; tuple; string:
            return choice(enum)
    }

    # Reservoir sampling
    var MAX_K = 12
    var count = 0
    var reservoir
    var cur
    var ridx

    reservoir = [0] * MAX_K

    for cur in enum {
        if count < MAX_K {
            reservoir[count] = cur
            count += 1
            continue
        }

        ridx = randint(0, count)

        if ridx < MAX_K {
            reservoir[ridx] = cur
        }

        count += 1
    }

    return count < MAX_K ? reservoir[randint(0, count - 1)] : choice(reservoir)
}

pub func reduce(enum, fn) {
    var acc
    var cur

    for cur in enum {
        if acc == nil {
            acc = cur
            continue
        }

        acc = fn(cur, acc)
    }

    return acc != nil ? option::new(acc) : option::new()
}

pub func reject(enum, fn) {
    var ret = []
    var cur

    for cur in enum {
        if !fn(cur) {
            ret.append(cur)
        }
    }

    return ret
}

pub func sum(enum) {
    return reduce(enum, (itm, acc) => {
        return acc + itm
    }).get()
}

pub func uniq(enum) {
    var chk = set::new()
    var ret = []
    var cur

    for cur in enum {
        if !chk.contains(cur) {
            chk.add(cur)
            ret.append(cur)
        }
    }

    return ret
}

pub func uniq_by(enum, fn) {
    var chk = set::new()
    var ret = []
    var tmp
    var cur

    for cur in enum {
        tmp = fn(cur)

        if !chk.contains(tmp) {
            chk.add(tmp)
            ret.append(cur)
        }
    }

    return ret
}

pub func unzip(enum) {
    var length = len(enum[0])
    var ret = []
    var index = 0
    var cur

    loop index < length {
        var tmp = []

        for cur in enum {
            tmp.append(cur[index])
        }

        ret.append(tmp)
        index += 1
    }

    return ret
}

pub func zip(...enums) {
    var lenum = len(enums)
    var ret = []
    var index = 0
    var cur

    for cur in enums[0] {
        var tmp = [0] * lenum

        for var i = 0; i < lenum; i ++ {
            tmp[i] = enums[i][index]
        }

        ret.append(tmp)
        index += 1
    }

    return ret
}
