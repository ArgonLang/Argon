/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
*/

from "argon:io" import LineReader, Reader, Writer
from "error" import ValueError

pub let DEFAULT_BUFSIZE = 2046 # 2KiB

pub struct BufferedReader impl LineReader, Reader {
    var stream
	var buffer

    var capacity = 0
    var index = 0
    var length = 0

    pub func BufferedReader(stream, size=DEFAULT_BUFSIZE) {
        return BufferedReader@(
			stream = stream,
			buffer = Bytes(size),
			capacity = size
		)
    }

	func FillBuffer(self) {
        # Check if buffer is empty
        if self.index < self.length {
            return self.length - self.index
        }

        self.length = self.stream.readinto(self.buffer, 0)
        self.index = 0

        return self.length
    }

	pub func read(self, size) {
        if size == 0 {
            return b""
        }

        var retval = Bytes(size)
        var nbytes = 0

        loop size != 0 {
            var to_read = self.FillBuffer()

            # EOF Check
            if to_read == 0 {
                return retval[:nbytes]
            }

            if size < to_read {
                to_read = size
            }

            to_read = retval.copy(self.buffer, self.index, nbytes, to_read)

            self.index += to_read
            nbytes += to_read
            size -= to_read

            loop size != 0 {
                to_read = self.stream.readinto(retval, nbytes)

				# EOF Check
				if to_read == 0 {
                    return retval[:nbytes]
                }

                nbytes += to_read
                size -= to_read
            }
        }

        return retval[:nbytes]
    }

    pub func readinto(self, buffer, offset) {
        var size = len(buffer)

        if offset < 0 {
            panic ValueError("offset cannot be less than zero", value=offset)
        }

        if size == 0 || offset >= size {
            return 0
        }

        size -= offset

        var base = offset
        var to_read = 0

        if self.index < self.length {
            to_read = self.length - self.index
        }

        if size < to_read {
            to_read = size
        }

        if to_read > 0 {
            to_read = buffer.copy(self.buffer, self.index, offset, to_read)

            self.index += to_read
            offset += to_read
            size -= to_read
        }

        loop size != 0 {
            to_read = self.stream.readinto(buffer, offset)

            # EOF Check
            if to_read == 0 {
                return offset - base
            }

            offset += to_read
            size -= to_read
        }

        return offset - base
    }

	pub func readline(self, size) {
		var retval = Bytes()
		var to_read
		var found

		if size == 0 {
			return retval
		}

		to_read = self.FillBuffer()

		loop to_read > 0 && (size < 0 || size > 0) {
			found = self.buffer.findbyte(self.index, '\n')
			if found >= 0 && (self.index + found) < self.length {
				found += 1

				if size > 0 && size < found {
					found = size
				}

				retval += self.buffer[self.index : self.index + found]
				self.index += found

				return retval
			}

			found = self.length - self.index

			if size > 0 && size < found {
				found = size
			}

			retval += self.buffer[self.index : self.index + found]
			self.index = self.index + found

            if size > 0 {
			    size -= found

                if size == 0 {
                    return retval
                }
            }

			to_read = self.FillBuffer()
		}

		return retval
	}
}

pub struct BufferedWriter impl Writer {
    var stream
    var buffer

    var capacity = 0
    var index = 0

    pub func BufferedWriter(stream, size=DEFAULT_BUFSIZE) {
        return BufferedWriter@(
			stream = stream,
			buffer = Bytes(size),
			capacity = size
		)
    }

    pub func flush(self) {
        if self.index < self.capacity {
            self.stream.write(self.buffer[:self.index])
        } else {
            self.stream.write(self.buffer)
        }

        self.index = 0
    }

    pub func write(self, buffer) {
        var length = len(buffer)

        if length >= self.capacity {
            self.flush()

            return self.stream.write(buffer)
        }

        length >= self.capacity - self.index ? self.flush()

        var written = self.buffer.copy(buffer, 0, self.index, length)

        self.index += written

        return written
    }
}
