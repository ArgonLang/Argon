/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
*/

import "io"
import "runtime"

pub var repl

struct Repl {
    pub var ps1
    pub var ps2
    var module

    var in_name = "stdin"

    pub func Repl(ps1, ps2, module) {
        if !typeof(module, Module) {
            module = Module(module, "")
        }

        return Repl@(
            ps1,
            ps2,
            module)
    }
    
    pub func interactive_loop(self) {
        var value
        var input

        loop {
            input = self.read_input()
            if input == "" || input == "\n" || input == "\r\n" {
                continue
            }

            var result = eval(self.in_name, self.module, input)
            if result {
                value = result.ok()
                if value != nil {
                    io.print(value)
                } else {
                    io.print("[Ok!]")
                }
            } else {
                value = result.err()

                if typeof(value, Error) && value.id == @RuntimeExit {
                    return
                }

                io.perror(value)
            }
        }
    }

    func read_input(self) {
        var p_open = [0, 0, 0]
        var line = self.ps1
        var total_buffer = ""
        var buffer
        var tabs = 0

        loop {
            buffer = io.input(prompt=line+("\t"*tabs))

            for var cursor of buffer {
                switch {
                    case cursor == '(':
                        p_open[0]++
                    case cursor == ')':
                        p_open[0]--
                    case cursor == '[':
                        p_open[1]++
                    case cursor == ']':
                        p_open[1]--
                    case cursor == '{':
                        p_open[2]++
                    case cursor == '}':
                        p_open[2]--
                }
            }

            total_buffer += buffer.tostr()
            line = self.ps2

            if p_open[0] < 0 || p_open[1] < 0 || p_open[2] < 0 {
                break
            }

            tabs = p_open[0] + p_open[1] + p_open[2]

            # TODO: Keep getting input if it ends with: :, ?, ??, |>, ::, ?., .

            if  tabs == 0 {
                break
            }
        }

        return total_buffer
    }
}

func RunDefaultRepl() {
    var module = require("__main") # Check if the "__main" context already exists

    repl = Repl("Ar> ", "... ", module ? module.ok() : "__main")

    !runtime.config["quiet"] ? io.print(runtime.version_ex)

    repl.interactive_loop()
}